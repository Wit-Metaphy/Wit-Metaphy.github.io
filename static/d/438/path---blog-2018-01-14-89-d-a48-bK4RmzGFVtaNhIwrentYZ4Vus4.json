{"data":{"markdownRemark":{"html":"<!--# Flexbox 中文文档 & Flex 兼容性问题-->\n<h2>灵感来源</h2>\n<blockquote>\n<p><a href=\"https://juejin.im/entry/5940bd9161ff4b006cb6b72f\">[前端] [译] 读完 flexbox 细则之后学到的 11 件事</a></p>\n</blockquote>\n<h2>原文链接</h2>\n<blockquote>\n<p><a href=\"https://www.w3.org/TR/css-flexbox-1/\">https://www.w3.org/TR/css-flexbox-1/</a>\n<a href=\"https://github.com/philipwalton/flexbugs\">https://github.com/philipwalton/flexbugs</a></p>\n</blockquote>\n<h2>友情提醒</h2>\n<blockquote>\n<p>本文不是严谨的翻译，会有部分删减，写作目的只是为了查漏补缺，入门请左转<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">阮一峰的Flex教程</a></p>\n</blockquote>\n<h2>介绍</h2>\n<p>CSS2.1定义了四种布局模式：</p>\n<ol>\n<li>块布局（ block layout ），适合布局文档</li>\n<li>内联布局（ inline layout ），适合布局文本</li>\n<li>表格布局（ table layout ），适合布局二维数据</li>\n<li>定位布局（ positioned layout ），适合精准定位</li>\n</ol>\n<p>这个模块引入了一个新的布局模式 —— 伸缩盒布局（ flex layout ）</p>\n<h2>术语</h2>\n<p>几个重点：</p>\n<ul>\n<li>flex container 以及 flex item</li>\n<li>main axis 以及 cross axis</li>\n<li>main size 以及 cross size</li>\n</ul>\n<p>这里就不赘述了。</p>\n<h2>Flex Containers: the flex and inline-flex display values</h2>\n<p>flex container 与块容器有很多相似之处，但是一些块容器内能使用的属性并不适用于 flex container：</p>\n<ul>\n<li><code class=\"language-text\">float</code>和<code class=\"language-text\">clear</code>对 flex items 不产生作用，且不会使它们脱离文档流</li>\n<li><code class=\"language-text\">vertical-align</code>对 flex items 不产生作用</li>\n<li><code class=\"language-text\">::first-line</code>和<code class=\"language-text\">::first-letter</code>伪元素不适用于flex container</li>\n</ul>\n<p>如果某元素的<code class=\"language-text\">display</code>值是<code class=\"language-text\">inline-flex</code>，在某些情况下，它可能被计算为<code class=\"language-text\">flex</code></p>\n<!-- 这里需要深入探究 -->\n<h2>Flex Items</h2>\n<p>flex container 中的文本流会被包裹进一个匿名的 flex item (它会继承 flex container 的样式)，如果文本流仅包含空白符（那些可以被<code class=\"language-text\">white-space</code>属性影响的字符），它将不会被渲染（就像给它加了<code class=\"language-text\">display: none</code>）</p>\n<p>flex item 内部是一个新的上下文环境，其类型由<code class=\"language-text\">display</code>属性决定，但是 flex item 本身处于其父元素即 flex container的上下文环境中</p>\n<!-- 这里有一段不理解 -->\n<h3>Absolutely-Positioned Flex Children</h3>\n<p>如果一个 flex item 的<code class=\"language-text\">position</code>为<code class=\"language-text\">absolute</code>，那么它不参与 flex container 的布局</p>\n<p>这里有一个比较抽象的概念：如果 flex container 中有一个绝对定位的子元素，那么该子元素的 static-position rectangle 就相当于 flex container 的 content box，且该子元素的大小会被固定成它所使用的大小</p>\n<p>这有什么影响呢？原文给了几个栗子：</p>\n<ul>\n<li>对该子元素使用<code class=\"language-text\">margin: auto</code>相当于<code class=\"language-text\">margin: 0</code></li>\n<li>对该子元素使用<code class=\"language-text\">align-self: center</code>正常，但是<code class=\"language-text\">align-self: stretch</code>相当于<code class=\"language-text\">align-self: flex-start</code></li>\n</ul>\n<!-- 这里需要深入探究static-position rectangle -->\n<h3>Flex Item Margins and Paddings</h3>\n<p>相邻的flex item 的<code class=\"language-text\">margin</code>不会重叠</p>\n<p>flex item 的<code class=\"language-text\">margin</code>和<code class=\"language-text\">padding</code>百分比值在不同浏览器中有不同的计算方式（有的全部根据<code class=\"language-text\">width</code>，有的左右根据<code class=\"language-text\">width</code>，上下根据<code class=\"language-text\">height</code>）</p>\n<p>强烈建议对于 flex item 的<code class=\"language-text\">margin</code>和<code class=\"language-text\">padding</code>不要使用百分比值</p>\n<h3>Flex Item Z-Ordering</h3>\n<p>flex item 很像 inline block ，所不同的是：</p>\n<ul>\n<li>flex item 可以使用<code class=\"language-text\">order</code>改变原始文档顺序</li>\n<li>即便不设置<code class=\"language-text\">position</code>，也可以使用<code class=\"language-text\">z-index</code></li>\n</ul>\n<h3>Collapsed Items</h3>\n<p>对一个 flex item 使用<code class=\"language-text\">visibility: collapse</code>可以使其“折叠”起来，它虽然不显示，但是存在于文档结构中，而且它会留下一个<code class=\"language-text\">strut</code>来保持 flex line 的 cross size</p>\n<p>不过，为了计算这个<code class=\"language-text\">strut</code>的大小，浏览器会先渲染一遍未“折叠”时的情况，然后重新渲染一遍“折叠”时的情况，这里有一些性能损耗，如果不是动态的可用<code class=\"language-text\">display: none</code>代替</p>\n<h3>Automatic Minimum Size of Flex Items</h3>\n<p>automatic minimum size 一般由 flex item 的 content size 和 specified size 中的较小者决定；</p>\n<p>当 flex item 有宽高比但没有 specified size 时，它的 automatic minimum size 就是它 content size 和 transferred size 中的较小者；</p>\n<p>当既没有 specified size 也没有宽高比时，它的 automatic minimum size 就是它的 content size</p>\n<p>那么这三个名词的含义是：</p>\n<p>specified size：\n如果 flex item 的 main size 是确定的，那么它就是 specified size</p>\n<p>transferred size：\n如果 flex item 有固定的宽高比，且它的 cross size 是确定的，那么它就是 transferred size</p>\n<p>content size：\ncontent size 就是 main axis 上的 min-content size</p>\n<p>恩，我也不知道我自己在说些什么</p>\n<p>总之，问题会出在这个content size 上，不仅仅是可能会出现一个超长单词破坏了你想要的布局，而且计算这个值需要遍历所有内容，如果内容量很大，会存在性能问题</p>\n<p>所以，废话了那么多，就是要手动指定<code class=\"language-text\">min-width</code></p>\n<h2>Ordering and Orientation</h2>\n<p>flex container 的内容可以按任何方向和顺序排列，这使得作者可以简单地实现以前需要很复杂或者很脆弱的方法实现的效果，例如<code class=\"language-text\">float</code>和<code class=\"language-text\">clear</code>属性这样的 hack 方法</p>\n<h3>Flex Flow Direction: the flex-direction property</h3>\n<p>flex-direction</p>\n<blockquote>\n<p>属性值：<strong>row</strong> | row-reverse | column | column-reverse</p>\n</blockquote>\n<p>需要注意的是 reverse 并不影响 order</p>\n<h3>Flex Line Wrapping: the flex-wrap property</h3>\n<p>flex-wrap</p>\n<blockquote>\n<p>属性值：<strong>nowrap</strong> | wrap | wrap-reverse</p>\n</blockquote>\n<p>wrap-reverse 属性其实是 cross-start 和 cross-end 位置交换了一下</p>\n<h3>Flex Direction and Wrap: the flex-flow shorthand</h3>\n<p><code class=\"language-text\">flex-flow</code>属性是<code class=\"language-text\">flex-direction</code>和<code class=\"language-text\">flex-wrap</code>的简写形式</p>\n<p>值得注意的是，<code class=\"language-text\">flex-flow: row</code>并不一定是从左至右的，它的方向取决于<code class=\"language-text\">writing-mode</code>这个属性的值，比如常见的<code class=\"language-text\">horizontal-tb</code>（top to bottom），以及类似文言文的<code class=\"language-text\">vertical-rl</code>（right to left）</p>\n<h3>Display Order: the order property</h3>\n<p>默认情况下，flex item 以源文档中显示的顺序显示，而<code class=\"language-text\">order</code>属性就是用来改变这个顺序的</p>\n<p>flex container 中绝对定位的子元素默认为<code class=\"language-text\">order: 0</code>，0是<code class=\"language-text\">order</code>的初始值，但不是最小值，也可以是负数</p>\n<p><code class=\"language-text\">order</code>属性只对 flex item 起作用</p>\n<h4>Reordering and Accessibility</h4>\n<p><code class=\"language-text\">order</code>属性不影响非可视媒体（例如speech）中的排序，就是说，<code class=\"language-text\">order</code>属性只用于调整视觉顺序，不能改变逻辑顺序（由于视觉感知是二维的和非线性的，所需的视觉顺序并不总是合乎逻辑的）</p>\n<p>比如常见的三圣杯布局：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">main</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">main > article</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span> <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 12em<span class=\"token punctuation\">;</span> <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">main > nav</span>     <span class=\"token punctuation\">{</span> <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">main > aside</span>   <span class=\"token punctuation\">{</span> <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>响应式：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> all and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Too narrow to support three columns */</span>\n  <span class=\"token selector\">main</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">main > article, main > nav, main > aside</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Return them to document order */</span>\n    <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Flexibility</h2>\n<p>flex 属性决定了 flex item 是否可以伸缩，这也是 flexible layout 的主要功能</p>\n<h3>The flex Shorthand</h3>\n<p>flex</p>\n<blockquote>\n<p>属性值：flex-grow | flex-shrink | flex-basis\n初始值：0 1 auto</p>\n</blockquote>\n<p>注意：flex 默认值中 flex-grow 是0，但是 flex-grow 自身的默认值是1</p>\n<p>flex-basis 除了<code class=\"language-text\">auto</code>关键字，还有一个<code class=\"language-text\">content</code>关键字，依据 flex item 的内容长度定大小</p>\n<h4>Basic Values of flex</h4>\n<p>四种最常见的值：</p>\n<ul>\n<li>initial：相当于<code class=\"language-text\">flex: 0 1 auto</code></li>\n<li>auto：相当于<code class=\"language-text\">flex: 1 1 auto</code></li>\n<li>none：相当于<code class=\"language-text\">flex: 0 0 auto</code></li>\n<li>positive-number：相当于<code class=\"language-text\">flex: positive-number 1 0</code></li>\n</ul>\n<p>这里重提一句，flex item 默认不会缩小到比 minimum content size 还小，所以手动设置<code class=\"language-text\">min-width</code>或<code class=\"language-text\">min-height</code>是必要的</p>\n<h3>Components of Flexibility</h3>\n<p>这里官方建议尽量使用<code class=\"language-text\">flex</code>简写属性，而不要分开设置</p>\n<h2> Alignment</h2>\n<h3> Aligning with auto margins</h3>\n<p>在<code class=\"language-text\">justify-content</code>和<code class=\"language-text\">align-self</code>起作用前，所有剩余空间都会先分配给 margin 的 auto </p>\n<p>一个很重要的应用是，如果想让一个 flex item 右对齐（比如网页中的登录按钮<code class=\"language-text\">#login</code>），只需要简单的给<code class=\"language-text\">#login</code>设置<code class=\"language-text\">margin-left: auto</code></p>\n<h3>Axis Alignment: the justify-content property</h3>\n<p>justify-content</p>\n<blockquote>\n<p>属性值：<strong>flex-start</strong> | flex-end | center | space-between | space-around</p>\n</blockquote>\n<h3>Cross-axis Alignment: the align-items and align-self properties</h3>\n<p>align-items</p>\n<blockquote>\n<p>属性值：flex-start | flex-end | center | baseline | <strong>stretch</strong></p>\n</blockquote>\n<p>align-self</p>\n<blockquote>\n<p>属性值：<strong>auto</strong> | flex-start | flex-end | center | baseline | stretch</p>\n</blockquote>\n<p>对于匿名 flex item ，<code class=\"language-text\">align-self</code>与 flex container 的<code class=\"language-text\">align-items</code>是一样的</p>\n<p>如果 flex item 的 cross-axis 方向的<code class=\"language-text\">margin</code>是<code class=\"language-text\">auto</code>，那么<code class=\"language-text\">align-self</code>是没有作用的</p>\n<h3>Packing Flex Lines: the align-content property</h3>\n<p>align-content</p>\n<blockquote>\n<p>属性值：flex-start | flex-end | center | space-between | space-around | <strong>stretch</strong></p>\n</blockquote>\n<p>只有多行 flex container 在 cross-axis 上具有空闲空间才能对齐行，因为在单行 flex container 中，唯一的行会自动拉伸以填充空间</p>\n<h3>Flex Container Baselines</h3>\n<!--看不懂啊-->\n<h2>兼容问题</h2>\n<h3>一些 HTML 元素不能成为 flex container</h3>\n<p>比如<code class=\"language-text\">button</code>和<code class=\"language-text\">fieldset</code></p>\n<p>受影响的浏览器：</p>\n<ul>\n<li>Chrome</li>\n<li>Edge</li>\n<li>Firefox（部分 fixed in 52）</li>\n<li>Opera</li>\n<li>Safari（fixed in 11）</li>\n</ul>\n<p>解决方案：在元素内部穿插一层可以成为 flex container 的容器，比如<code class=\"language-text\">div</code></p>\n<h3>使用 flex-flow: column wrap 的 shrink-to-fit container 不会包裹它的内容</h3>\n<p>所谓 shrink-to-fit container ，即使用了<code class=\"language-text\">float</code>或<code class=\"language-text\">inline-flex</code>或<code class=\"language-text\">position: absolute</code>的 flex container</p>\n<p>受影响的浏览器：</p>\n<ul>\n<li>Chrome</li>\n<li>Firefox</li>\n<li>Opera</li>\n<li>Safari</li>\n</ul>\n<p>解决方案：如果 container 有一个固定的高度，可以使用<code class=\"language-text\">flex-flow: column wrap</code>并且设置 container 的<code class=\"language-text\">writing-mode: vertical-lr</code>来模拟原来的效果（切记把 flex item 的<code class=\"language-text\">writing-mode</code>改回来，初始值是<code class=\"language-text\">horizontal-tb</code>）（在 Safari 10 中你可能还需要明确设置 flex item 的宽高属性）</p>\n<h3>flex item 的 minimum content size 问题</h3>\n<p>受影响的浏览器：</p>\n<ul>\n<li>Chrome（部分 fixed in 44）</li>\n<li>Opera（部分 fixed in 31）</li>\n<li>Safari（fixed in 10）</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>正如前文所提到的，手动设置 min-width 是个稳妥的方案</li>\n<li>设置\t<code class=\"language-text\">flex-shrink: 0</code>而不用默认值1，且设<code class=\"language-text\">flex-basis: auto</code>（这个方案感觉不是很好，因为<code class=\"language-text\">flex</code>属性最好使用关键字）</li>\n</ul>\n<h3>column flex container 设置 align-items: center 时溢出容器</h3>\n<p>受影响的浏览器：Internet Explorer 10-11 (fixed in Edge)</p>\n<p>解决方案：设置<code class=\"language-text\">max-width: 100%</code></p>\n<h3>flex item 无法感知 flex container 的 min-height 属性</h3>\n<p>受影响的浏览器：Internet Explorer 10-11 (fixed in Edge)</p>\n<p>解决方案：</p>\n<ul>\n<li>使用<code class=\"language-text\">height</code>而不用<code class=\"language-text\">min-height</code></li>\n<li>如果<code class=\"language-text\">min-height</code>必要，在 flex container 上在裹一层 flex container</li>\n</ul>\n<h3>默认 flex 值</h3>\n<p>受影响的浏览器：Internet Explorer 10 (fixed in 11)</p>\n<table>\n<thead>\n<tr>\n<th>它应该是什么</th>\n<th>IE 10</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>（没有声明）</td>\n<td>flex: 0 1 auto</td>\n<td>flex: 0 0 auto</td>\n</tr>\n<tr>\n<td>flex: 1</td>\n<td>flex: 1 1 0%</td>\n<td>flex: 1 0 0px</td>\n</tr>\n<tr>\n<td>flex: auto</td>\n<td>flex: 1 1 auto</td>\n<td>flex: 1 0 auto</td>\n</tr>\n<tr>\n<td>flex: initial</td>\n<td>flex: 0 1 auto</td>\n<td>flex: 0 0 auto</td>\n</tr>\n</tbody>\n</table>\n<p>解决方案：如果必须支持IE 10，最好的解决方案是始终显式为 flex-shrink 设置值，或者在 flex 声明中始终使用简写形式而不用关键字</p>","frontmatter":{"date":"January 14, 2018","path":"/blog/2018-01-14","title":"译 Flexible Box Layout Module Level 1 & Flexbugs"}}},"pageContext":{}}