{"data":{"markdownRemark":{"html":"<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n<p>示例 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;babad&quot;\n输出: &quot;bab&quot;\n注意: &quot;aba&quot; 也是一个有效答案。</code></pre></div>\n<p>示例 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">输入: &quot;cbbd&quot;\n输出: &quot;bb&quot;</code></pre></div>\n<h2>解答</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * @param {string} s\n * @return {string}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">longestPalindrome</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> s <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>left1<span class=\"token punctuation\">,</span> right1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>left2<span class=\"token punctuation\">,</span> right2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right1 <span class=\"token operator\">-</span> left1 <span class=\"token operator\">></span> right2 <span class=\"token operator\">-</span> left2 <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>left1<span class=\"token punctuation\">,</span> right1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>left2<span class=\"token punctuation\">,</span> right2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">&lt;</span> right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            start <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n            end <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        l<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"March 17, 2019","path":"/blog/2019-03-17","title":"Leetcode——最长回文子串"}}},"pageContext":{}}